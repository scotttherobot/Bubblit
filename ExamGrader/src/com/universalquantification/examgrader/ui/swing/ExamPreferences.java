package com.universalquantification.examgrader.ui.swing;

import com.universalquantification.examgrader.ui.swing.GUIView;
import com.universalquantification.examgrader.utils.AppFileFilter;
import com.universalquantification.examgrader.utils.PreferencesManager;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 * Represents application preferences.
 *
 * @author CY
 */
public class ExamPreferences extends javax.swing.JFrame
{
    private final GUIView application;
    private final JFileChooser folderChooser;
    private String path;

    /**
     * Creates new form ExamPreferences
     *
     * @param application the application to use
     */
    public ExamPreferences(GUIView application)
    {
        initComponents();

        this.setIconImage(new ImageIcon("Icon.PNG").getImage());

        setLocationRelativeTo(null);

        this.application = application;

        folderChooser = new JFileChooser();

        folderChooser.setDialogTitle("Bubblit - Please choose a directory.");

        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        folderChooser.setAcceptAllFileFilterUsed(false);

        AppFileFilter filter = new AppFileFilter("Directory/Folder",
            new String[]
            {
            });

        folderChooser.setFileFilter(filter);

        this.addComponentListener(new ComponentListener()
        {
            @Override
            public void componentResized(ComponentEvent e)
            {
            }

            @Override
            public void componentMoved(ComponentEvent e)
            {
            }

            @Override
            public void componentShown(ComponentEvent e)
            {
                resetToCurrentSettings();
            }

            @Override
            public void componentHidden(ComponentEvent e)
            {
            }
        });
    }

    private void resetToCurrentSettings()
    {
        path = (String) PreferencesManager.getInstance().get(
            PreferencesManager.kOverrideDir);

        // make sure that we have a valid path to write to
        if (path != null)
        {
            OutputDirectoryLabel.setText(path);
        }
        else
        {
            OutputDirectoryLabel.setText("No directory selected.");
        }

        examCorrectAnswerDisplayPreference.setState(
            (boolean) PreferencesManager.getInstance().get(
                "show-correct-answers"));
        examImagePreference.setState((boolean) 
            PreferencesManager.getInstance().get("show-full-image"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        examImagePreference = new java.awt.Checkbox();
        examCorrectAnswerDisplayPreference = new java.awt.Checkbox();
        jSeparator1 = new javax.swing.JSeparator();
        OutputDirectoryLabel = new javax.swing.JLabel();
        SetOutputButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        ButtonPanel = new javax.swing.JPanel();
        ApplyButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bubblit Preferences");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        examImagePreference.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        examImagePreference.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        examImagePreference.setLabel("Display a full image, instead of a partial image, for each test on the results webpages.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(14, 10, 4, 10);
        getContentPane().add(examImagePreference, gridBagConstraints);

        examCorrectAnswerDisplayPreference.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        examCorrectAnswerDisplayPreference.setLabel("Display correct answers for each test on the results webpages.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 10, 10, 10);
        getContentPane().add(examCorrectAnswerDisplayPreference, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0E-4;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 8, 10);
        getContentPane().add(jSeparator1, gridBagConstraints);

        OutputDirectoryLabel.setText("No directory selected.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 152);
        getContentPane().add(OutputDirectoryLabel, gridBagConstraints);

        SetOutputButton.setText("Set Output Directory");
        SetOutputButton.setToolTipText("Set the directory to which files generated by the grading process will be outputted to.");
        SetOutputButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SetOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetOutputButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(SetOutputButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0E-4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jSeparator2, gridBagConstraints);

        ButtonPanel.setMinimumSize(new java.awt.Dimension(200, 23));
        ButtonPanel.setLayout(new java.awt.GridBagLayout());

        ApplyButton.setText("Apply");
        ApplyButton.setToolTipText("Apply these preferences. These preferences will reset upon restarting the program.");
        ApplyButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        ButtonPanel.add(ApplyButton, gridBagConstraints);

        CancelButton.setText("Cancel");
        CancelButton.setToolTipText("Do not apply these preferences and revert to preferences prior to modification.");
        CancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        ButtonPanel.add(CancelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0E-4;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        getContentPane().add(ButtonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetOutputButtonActionPerformed
        // set the output folder
        if (folderChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File selectedDirectory = folderChooser.getSelectedFile();

            path = selectedDirectory.getAbsolutePath() + File.separator;

            OutputDirectoryLabel.setText(path);
        }
    }//GEN-LAST:event_SetOutputButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        PreferencesManager.getInstance().set(
            PreferencesManager.kOverrideDir,
            path);

        application.setShowCorrectAnswerPreference(
            examCorrectAnswerDisplayPreference.getState());

        application.setTestImagePreference(examImagePreference.getState());

        this.dispose();
    }//GEN-LAST:event_ApplyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JLabel OutputDirectoryLabel;
    private javax.swing.JButton SetOutputButton;
    private java.awt.Checkbox examCorrectAnswerDisplayPreference;
    private java.awt.Checkbox examImagePreference;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
